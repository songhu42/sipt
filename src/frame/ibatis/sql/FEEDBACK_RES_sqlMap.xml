<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap
    PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"
    "http://ibatis.apache.org/dtd/sql-map-2.dtd">

<sqlMap namespace="FEEDBACK_RES">
	
    <select id="getCount" parameterClass="java.util.Map" resultClass="int">
        SELECT COUNT(*) 
		FROM FEEDBACK_RES A  
		LEFT OUTER JOIN FEEDBACK_MST B ON ( A.SEQ_NO = B.SEQ_NO ) 
		INNER JOIN USER_MST C ON ( A.USER_ID = C.USER_ID ) 
		LEFT OUTER JOIN COM_CODE D ON ( D.PCODE = 'A03' AND C.USER_AGE = D.CODE )
		LEFT OUTER JOIN COM_CODE F ON ( F.PCODE = 'A07' AND A.RES_TYPE = F.CODE )
		LEFT OUTER JOIN COM_CODE G ON ( G.PCODE = 'A08' AND A.RES_ST = G.CODE )
		LEFT OUTER JOIN (
		 SELECT A.USER_ID, COUNT(*) AS BUY_CNT, SUM(A.ADD_MAX_HEART) AS BUY_MAX_HEART_CNT, SUM(D.PRICE) AS BUY_TOT_AMT  
		 FROM BUY_HISTORY A
		 INNER JOIN USER_MST B ON (A.USER_ID = B.USER_ID)  
		 LEFT OUTER JOIN INAPP_ITEM D ON ( B.LOGIN_TYPE = D.APP_GB AND B.DEVICE_TOKEN = D.OS_GB AND A.ITEM_ID = D.ITEM_ID )  
		 GROUP BY A.USER_ID ) E ON (A.USER_ID = E.USER_ID )  
        <isNotEmpty property="WHERE_OPTION">
        $WHERE_OPTION$
        </isNotEmpty>
    </select>

    <select id="getFeedbackSum" parameterClass="java.util.Map" resultClass="com.humanval.sipt.dao.Feedback_sum">
		SELECT SUM(IF(RES_TYPE=0, 1, 0)) AS LIKE_CNT, SUM(IF(RES_TYPE=1, 1, 0)) AS GAME_CNT, 
			SUM(IF(RES_TYPE=2, 1, 0)) AS STUDY_CNT, SUM(IF(RES_TYPE=3, 1, 0)) AS HEART_CNT, 
			SUM(IF(RES_TYPE=4, 1, 0)) AS REQ_CNT, SUM(IF(RES_TYPE=8, 1, 0)) AS ERROR_CNT, 
			SUM(IF(RES_TYPE=9, 1, 0)) AS ETC_CNT, SUM(1) AS TOT_CNT
		FROM FEEDBACK_RES  

        <isNotEmpty property="WHERE_OPTION">
        $WHERE_OPTION$
        </isNotEmpty>
        
    </select>
    
    <select id="getListPage" parameterClass="java.util.Map" resultClass="com.humanval.sipt.dao.Feedback_res">
		SELECT A.SEQ_NO, A.USER_ID, A.RESULT, A.RES_YN, A.RES_TYPE, A.RES_ST, A.RES_SEQ, A.REG_DT, 
		B.TITLE, B.CONTENT, B.TARGET, B.CONT_LIMIT,  B.HEART_CNT AS REW_HEART_CNT, B.DAMON_CNT AS REW_DAMON_CNT, B.VALID_DT, 
		C.USER_NIC, C.STAGE, C.USER_GRADE, C.USER_LVL, C.USER_GOLD, C.USER_EXP, C.WP_ITEM, C.WP_LVL, C.LOGIN_TYPE, C.DEVICE_TOKEN, 
		C.JOIN_DT, C.MAX_HEART_CNT, C.HEART_CNT, C.PASS_ITEM_CNT, C.TIME_ITEM_CNT, C.EVENT_DAYS, C.EVENT_DT, C.APP_VER, 
		C.USER_AGE, D.NAME AS USER_AGE_NM,  F.NAME AS RES_TYPE_NM, G.NAME AS RES_ST_NM, 
		IFNULL(C.INVITOR_ID,0) AS INVITOR_ID, IFNULL(E.BUY_CNT,0) AS BUY_CNT, IFNULL(E.BUY_TOT_AMT, 0) AS BUY_TOT_AMT , IFNULL(H.CONTENT, '') AS RESULT_CONTENT
		FROM FEEDBACK_RES A  
		LEFT OUTER JOIN FEEDBACK_MST B ON ( IF(A.SEQ_NO > 10000, 5, A.SEQ_NO) = B.SEQ_NO ) 
		INNER JOIN USER_MST C ON ( A.USER_ID = C.USER_ID ) 
		LEFT OUTER JOIN COM_CODE D ON ( D.PCODE = 'A03' AND C.USER_AGE = D.CODE )
		LEFT OUTER JOIN COM_CODE F ON ( F.PCODE = 'A07' AND A.RES_TYPE = F.CODE )
		LEFT OUTER JOIN COM_CODE G ON ( G.PCODE = 'A08' AND A.RES_ST = G.CODE )
		LEFT OUTER JOIN BOARD_ANN H ON ( A.RES_SEQ = H.SEQ_NO )
		LEFT OUTER JOIN (
		 SELECT A.USER_ID, COUNT(*) AS BUY_CNT, SUM(A.ADD_MAX_HEART) AS BUY_MAX_HEART_CNT, SUM(D.PRICE) AS BUY_TOT_AMT  
		 FROM BUY_HISTORY A
		 INNER JOIN USER_MST B ON (A.USER_ID = B.USER_ID)  
		 LEFT OUTER JOIN INAPP_ITEM D ON ( B.LOGIN_TYPE = D.APP_GB AND B.DEVICE_TOKEN = D.OS_GB AND A.ITEM_ID = D.ITEM_ID )  
		 GROUP BY A.USER_ID ) E ON (A.USER_ID = E.USER_ID )  

        <isNotEmpty property="WHERE_OPTION">
        $WHERE_OPTION$
        </isNotEmpty>
        ORDER BY A.REG_DT DESC 
        LIMIT #START_NO#, #PAGE_CNT#
        
    </select>
    
    
    <select id="getList" parameterClass="java.util.Map" resultClass="com.humanval.sipt.dao.Feedback_res">
		SELECT A.SEQ_NO, A.USER_ID, A.RESULT, A.RES_YN, A.RES_TYPE, A.RES_ST, A.RES_SEQ, A.REG_DT, 
		B.TITLE, B.CONTENT, B.TARGET, B.CONT_LIMIT,  B.HEART_CNT AS REW_HEART_CNT, B.DAMON_CNT AS REW_DAMON_CNT, B.VALID_DT, 
		C.USER_NIC, C.STAGE, C.USER_GRADE, C.USER_LVL, C.USER_GOLD, C.USER_EXP, C.WP_ITEM, C.WP_LVL, C.LOGIN_TYPE, C.DEVICE_TOKEN, 
		C.JOIN_DT, C.MAX_HEART_CNT, C.HEART_CNT, C.PASS_ITEM_CNT, C.TIME_ITEM_CNT, C.EVENT_DAYS, C.EVENT_DT, C.APP_VER, 
		C.USER_AGE, D.NAME AS USER_AGE_NM,  F.NAME AS RES_TYPE_NM, G.NAME AS RES_ST_NM, 
		IFNULL(C.INVITOR_ID,0) AS INVITOR_ID, IFNULL(E.BUY_CNT,0) AS BUY_CNT, IFNULL(E.BUY_TOT_AMT, 0) AS BUY_TOT_AMT , IFNULL(H.CONTENT, '') AS RESULT_CONTENT
		FROM FEEDBACK_RES A  
		LEFT OUTER JOIN FEEDBACK_MST B ON ( IF(A.SEQ_NO > 10000, 5, A.SEQ_NO) = B.SEQ_NO ) 
		INNER JOIN USER_MST C ON ( A.USER_ID = C.USER_ID ) 
		LEFT OUTER JOIN COM_CODE D ON ( D.PCODE = 'A03' AND C.USER_AGE = D.CODE )
		LEFT OUTER JOIN COM_CODE F ON ( F.PCODE = 'A07' AND A.RES_TYPE = F.CODE )
		LEFT OUTER JOIN COM_CODE G ON ( G.PCODE = 'A08' AND A.RES_ST = G.CODE )
		LEFT OUTER JOIN BOARD_ANN H ON ( A.RES_SEQ = H.SEQ_NO )
		LEFT OUTER JOIN (
		 SELECT A.USER_ID, COUNT(*) AS BUY_CNT, SUM(A.ADD_MAX_HEART) AS BUY_MAX_HEART_CNT, SUM(D.PRICE) AS BUY_TOT_AMT  
		 FROM BUY_HISTORY A
		 INNER JOIN USER_MST B ON (A.USER_ID = B.USER_ID)  
		 LEFT OUTER JOIN INAPP_ITEM D ON ( B.LOGIN_TYPE = D.APP_GB AND B.DEVICE_TOKEN = D.OS_GB AND A.ITEM_ID = D.ITEM_ID )  
		 GROUP BY A.USER_ID ) E ON (A.USER_ID = E.USER_ID )  

        <isNotEmpty property="WHERE_OPTION">
        $WHERE_OPTION$
        </isNotEmpty>
        ORDER BY A.REG_DT DESC 
        
    </select>
    
    <select id="getView" parameterClass="java.util.Map" resultClass="com.humanval.sipt.dao.Feedback_res">
		SELECT A.SEQ_NO, A.USER_ID, A.RESULT, A.RES_YN, A.RES_TYPE, A.RES_ST, A.RES_SEQ, A.REG_DT, 
		B.TITLE, B.CONTENT, B.TARGET, B.CONT_LIMIT,  B.HEART_CNT AS REW_HEART_CNT, B.DAMON_CNT AS REW_DAMON_CNT, B.VALID_DT, 
		C.USER_NIC, C.STAGE, C.USER_GRADE, C.USER_LVL, C.USER_GOLD, C.USER_EXP, C.WP_ITEM, C.WP_LVL, C.LOGIN_TYPE, C.DEVICE_TOKEN, 
		C.JOIN_DT, C.MAX_HEART_CNT, C.HEART_CNT, C.PASS_ITEM_CNT, C.TIME_ITEM_CNT, C.EVENT_DAYS, C.EVENT_DT, C.APP_VER, 
		C.USER_AGE, D.NAME AS USER_AGE_NM,  F.NAME AS RES_TYPE_NM, G.NAME AS RES_ST_NM, 
		IFNULL(C.INVITOR_ID,0) AS INVITOR_ID, IFNULL(E.BUY_CNT,0) AS BUY_CNT, IFNULL(E.BUY_TOT_AMT, 0) AS BUY_TOT_AMT , IFNULL(H.CONTENT, '') AS RESULT_CONTENT
		FROM FEEDBACK_RES A  
		LEFT OUTER JOIN FEEDBACK_MST B ON ( IF(A.SEQ_NO > 10000, 5, A.SEQ_NO) = B.SEQ_NO )  
		INNER JOIN USER_MST C ON ( A.USER_ID = C.USER_ID ) 
		LEFT OUTER JOIN COM_CODE D ON ( D.PCODE = 'A03' AND C.USER_AGE = D.CODE )
		LEFT OUTER JOIN COM_CODE F ON ( F.PCODE = 'A07' AND A.RES_TYPE = F.CODE )
		LEFT OUTER JOIN COM_CODE G ON ( G.PCODE = 'A08' AND A.RES_ST = G.CODE )
		LEFT OUTER JOIN BOARD_ANN H ON ( A.RES_SEQ = H.SEQ_NO )
		LEFT OUTER JOIN (
		 SELECT A.USER_ID, COUNT(*) AS BUY_CNT, SUM(A.ADD_MAX_HEART) AS BUY_MAX_HEART_CNT, SUM(D.PRICE) AS BUY_TOT_AMT  
		 FROM BUY_HISTORY A
		 INNER JOIN USER_MST B ON (A.USER_ID = B.USER_ID)  
		 LEFT OUTER JOIN INAPP_ITEM D ON ( B.LOGIN_TYPE = D.APP_GB AND B.DEVICE_TOKEN = D.OS_GB AND A.ITEM_ID = D.ITEM_ID )  
		 GROUP BY A.USER_ID ) E ON (A.USER_ID = E.USER_ID )  
		
        WHERE A.SEQ_NO = #SEQ_NO# AND A.USER_ID = #USER_ID# 
    </select>
            
        
    <statement id="update" parameterClass="java.util.Map" resultClass="int">
		UPDATE FEEDBACK_RES SET  
			RES_TYPE=#RES_TYPE#, RES_SEQ=#RES_SEQ#,  RES_ST=#RES_ST#
		WHERE SEQ_NO = #SEQ_NO#  AND USER_ID = #USER_ID# 
    </statement> 
        
    
    <statement id="updateResType" parameterClass="java.util.Map" resultClass="int">
		UPDATE FEEDBACK_RES SET  
			RES_TYPE=#RES_TYPE#, RES_ST=#RES_ST#
		WHERE SEQ_NO = #SEQ_NO#  AND USER_ID = #USER_ID# 
    </statement> 
    
    <statement id="delete" parameterClass="java.util.Map" resultClass="int">
		DELETE FROM FEEDBACK_RES WHERE SEQ_NO = #SEQ_NO#  AND USER_ID = #USER_ID# 
    </statement> 
    
    
</sqlMap>